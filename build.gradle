group = 'com.strongloop';

buildscript {
  repositories {
      mavenCentral()
  }
  dependencies {
      classpath 'com.android.tools.build:gradle:0.7.+'
      classpath 'com.github.dcendents:android-maven-plugin:1.0'
  }
}

apply plugin: 'android-library'
apply plugin: 'android-maven'
apply plugin: 'signing'

def sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
def isJenkinsBuild = System.getenv("BUILD_NUMBER")
def isReleaseBuild = !version.contains("SNAPSHOT")
def shouldPublishToMavenCentral = isReleaseBuild
def mavenLocalUrl

repositories {
    mavenLocal();
    mavenCentral()
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.1.0"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 14
    }
}

dependencies {
    compile 'com.loopj.android:android-async-http:1.4.4'
    instrumentTestCompile 'com.google.guava:guava:15.0'
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }

    // define androidReleaseJar task
    task("android${name.capitalize()}Jar", type: Jar) {
        dependsOn variant.javaCompile
        from variant.javaCompile.destinationDir
    }

    // define androidReleaseJavadoc task
    task("generate${name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.plugin.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
    }
}

afterEvaluate { project ->
    task androidJavadocsJar(type: Jar, dependsOn: generateReleaseJavadoc) {
        classifier = 'javadoc'
        from generateReleaseJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.allSource
    }

    artifacts {
        archives androidReleaseJar
        archives androidSourcesJar
        archives androidJavadocsJar
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                if (shouldPublishToMavenCentral) {
                    beforeDeployment { MavenDeployment deployment ->
                        signing.signPom(deployment)
                    }

                    repository(url: sonatypeRepositoryUrl) {
                        authentication(
                            userName: sonatypeUserName,
                            password: sonatypePassword);
                    }

                }

                pom.project {
                    name 'strong-remoting-android'
                    description 'Android client for strong-remoting'
                    url 'https://github.com/strongloop/strong-remoting-android'

                    licenses {
                        license {
                            name 'The MIT License'
                            url 'http://opensource.org/licenses/mit-license.php'
                            distribution 'repo'
                        }
                    }

                    scm {
                        connection 'scm:git@github.com:strongloop/strong-remoting-android.git'
                        developerConnection 'scm:git@github.com:strongloop/strong-remoting-android.git'
                        url 'https://github.com/strongloop/strong-remoting-android'
                    }

                    developers {
                        developer {
                            id 'bajtos'
                            name 'Miroslav Bajtos'
                            email 'miroslav@strongloop.com'
                            organization = 'StrongLoop, Inc.'
                            organizationUrl 'http://strongloop.com/'
                        }
                    }
                }

                pom.withXml {
                    def root = asNode()
                    root.appendNode('packaging', 'jar');
                }
            }
        }
    }

    // Task for Jenkins build that will conditionally
    // call uploadArchives, but only if there is something
    // to upload
    task publishToMavenCentral {
      if (shouldPublishToMavenCentral)
          dependsOn uploadArchives
    }

    if (shouldPublishToMavenCentral) {
        signing {
            required {
                gradle.taskGraph.hasTask("uploadArchives")
            }
            sign configurations.archives
        }
    }
}
